---
layout: post
title:  üáßüá∑ "def get_self_request def_create_self_request. Mas, afinal, o que √© request?"
date:   2021-05-16 14:04:26 -0300
categories: jekyll update
---

Uma parte essencial da funcionamento da internet como a temos em nosso cotidiano diz respeito √† requests. Nesse artigo vamos discorrer sobre requests, sua import√¢ncia, em que parte do fluxo de comunica√ß√£o entre sistemas ela se encaixa, e finalmente, como ela existe no contexto do Django.


First things first: Request √© traduzido para portugu√™s como requisi√ß√£o, e requisi√ß√µes n√£o s√£o nada mais nada menos do que pedidos. Como nos lembra a gram√°tica, quem pede, pede alguma coisa. No caso de sistemas de web, pede-se recursos. Recursos podem ser imagens do seu IG, v√≠deos do YT, ou uma p√°gina de texto da Wikipedia. Esses recursos retornar√£o em forma de Responses.


Como toda comunica√ß√£o de qualidade, √© necess√°rio que haja uma linguagem comum entre o emissor da mensagem e o destinat√°rio. A essa linguagem comum damos o nome de protocolo. Em sistemas web, o protocolo de comunica√ß√£o √© o HTTP, respons√°vel pelo tratamento de pedidos e respostas entre cliente e servidor na World Wide Web.


Cliente √© todo sistema que requisita um recurso e servidor √© o sistema que serve o recurso. Por exemplo, o seu browser (Chrome, Firefox, Safari, ‚Ä¶) √© um cliente. O Google, por exemplo, tem seus servidores que fornecem as respostas com os recursos requisitados.


![image](../../../../../../images/primeiro_post/cliente_servidor.jpeg){:class="img-responsive", description="http://www.ead.ufrpe.br/acervo-digital-eadtec/node/685"}


Sendo que existem tantos sites, servidores, usu√°rios de computadores (smartphones, laptops, desktops,‚Ä¶), como a requisi√ß√£o por www.google.com do seu browser chega ao Google?

O link www.google.com √© uma URL, Uniform Resource Locator, que no bom e velho portugu√™s √© um Localizador Uniforme de Recursos, um nome bem descritivo. E como funciona? Muito semelhante ao sistema de correios.

Supondo seu endere√ßo escrito com o padr√£o americano: **123** (dom√≠nio: n√∫mero da resid√™ncia), **Times Square St.**(dom√≠nio: rua), **Nova York** (dom√≠nio: cidade), **Nova York** (dom√≠nio: estado).

O endere√ßo _www.google.com_. √© ent√£o descrito em detalhes:
Cada parte entre os pontos √© um dom√≠nio.


- _._ : o ponto n√£o aparece para n√≥s, mas ele existe e significa o DNS raiz;
- _com_ : √© um dos nomes de dom√≠nios de n√≠vel mais alto na hierarquia de nomes. Outros s√£o .org, .edu, .net, .gov, ‚Ä¶;
- _google_ : √© um nome de dom√≠nio. A identifica√ß√£o prim√°ria do servi√ßo que voc√™ deseja na internet;
- _www_ : √© um subdom√≠nio de dom√≠nio, como mail, wiki;


![image](../../../../../../images/primeiro_post/resolucao_de_nomes.jpeg){:class="img-responsive"}


√â not√°vel que estamos falando em nomes o tempo todo. No entanto, os computadores n√£o se comunicam dessa forma, esses s√£o nomes mais amig√°veis para n√≥s humanos lermos, apenas. A realidade √© que para os sistemas computacionais o endere√ßo www.google.com √© 172.217.30.78.


Para traduzir um nome em um endere√ßo de n√∫meros, a internet usa servidores de DNS ‚Äî Domain Name System. O sistema de nomes de dom√≠nios traduz os nomes de dom√≠nio para endere√ßos de computadores, os IPs. Talvez voc√™ j√° tenha visto n√∫meros do tipo _192.168.0.1_ ou _127.0.0.1_. Esses s√£o exemplos de endere√ßos IPs ‚Äî Internet Protocol.


A resolu√ß√£o de nomes funciona assim: Quando o browser faz uma requisi√ß√£o, ele pergunta ao servidor de nomes (servidor de DNS) mais pr√≥ximo pelo IP do dom√≠nio que ele quer. O servidor de DNS guarda uma tabela com tudo que j√° procuraram e que ele soube resolver, mas ela pode ficar desatualizada ou ele n√£o ter resolvido esse nome antes, quando isso ocorre, ele manda o request para o pr√≥ximo servidor de DNS, e assim continua a busca pelo IP do dom√≠nio que se quer.

![image](../../../../../../images/primeiro_post/dns.png){:class="img-responsive"}

**At√© aqui vimos como funciona o request na arquitetura Cliente-Servidor, vimos tamb√©m que tem que haver um protocolo para que todos se comuniquem efetivamente, que os nomes dos sites s√£o traduzidos para endere√ßos de IPs e como eles s√£o encontrados.**

Falta ainda saber como √© esse protocolo de comunica√ß√£o que rege a conversa entre os clientes e servidores, o HTTP.

Quando vamos pedir algo costumamos usar verbos que representam a√ß√µes, assim tamb√©m o HTTP funciona. Por exemplo, quando o browser quer algum recurso ele usa o **GET**, j√° quando ele quer enviar um recurso ele usa o **POST**, quando ele quer apagar um recurso ele usa o **DELETE** ‚Äî h√° ainda o **PUT**, **HEAD**, **CONNECT**, **OPTIONS**, **TRACE** (https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Methods).

Juntando tudo, quando se busca por www.google.com no browser, o recurso √© a URL (www.google.com), a a√ß√£o que o cliente quer fazer √© **GET**, e o protocolo eh _HTTP 2_. Ent√£o o request fica assim:

![image](../../../../../../images/primeiro_post/request.png){:class="img-responsive"}

Para cuidar de uma requisi√ß√£o existe um software chamado web server, ele espera o cliente enviar sua conex√£o e logo ap√≥s o request. Antes de criar a conex√£o entre cliente e servidor, primeiro se estabelece uma conex√£o TCP, que utiliza um par ‚ÄúIP+porta‚Äù chamado de socket, que √© o que identifica seu PC como √∫nico na rede. √â necess√°rio um par de sockets para identificar dois extremos (endpoints) na rede. Para um cliente √© necess√°rio apenas um socket e estabelecer a conex√£o, mas para um server h√° um processo mais longo, que √© ilustrado no seguinte esquema:

![image](../../../../../../images/primeiro_post/listen_server.png){:class="img-responsive"}


E finalmente chegamos ao Django! Como parte de suas funcionalidades , ele processa os requests e envia respostas. Para que ele funcione, √© necess√°rio que haja o web server para fazer as conex√µes. No entanto, no mundo Python, linguagem que o Django utiliza, h√° um formato espec√≠fico e diferente para a requisi√ß√£o, o que faz necess√°rio que haja uma uniformidade de comunica√ß√£o entre o web server e o mundo python. A esse formato d√°-se o nome de WSGI (Web Server Gateway Interface), que se pronuncia ‚Äúwiz-gee‚Äù.

![image](../../../../../../images/primeiro_post/middleware.png){:class="img-responsive"}

Como programadora ou programador Django, voc√™ quer receber esses requests e devolver recursos/responses. Isso √© feito atrav√©s da configura√ß√£o de urls que levar√£o √†s views, onde est√° a l√≥gica de processamento dos dados ‚Äî elas podem buscar no banco de dados por registros ‚Äî e na volta as views formam as responses e fazem o caminho inverso at√© chegar ao browser (setas pontilhadas).

![image](../../../../../../images/primeiro_post/dns_until_pc.png){:class="img-responsive"}

Espero que tenha ajudado a responder √† pergunta do t√≠tulo!


Leituras adicionais:


- [https://docs.djangoproject.com/en/3.0/ref/request-response/] - Django Request Response doc;

- [https://ruslanspivak.com/lsbaws-part1/] - Server;

- [https://www.mattlayman.com/understand-django/browser-to-django/] - Bbrowser to Django;

- [https://medium.com/@ksarthak4ever/django-request-response-cycle-2626e9e8606e] - Django request response cycle.